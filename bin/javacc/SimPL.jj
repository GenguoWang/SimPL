/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SimPL.jj */
/*@egen*/options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC=false;
               
                        
                      
                        
}

PARSER_BEGIN(WggSimPLParser)
package javacc;


public class WggSimPLParser/*@bgen(jjtree)*/implements WggSimPLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTWggSimPLParserState jjtree = new JJTWggSimPLParserState();

/*@egen*/
 public SimpleNode getTreeRoot()
 {  	return  (SimpleNode)(this.jjtree.rootNode());
 }
 
}

PARSER_END(WggSimPLParser)

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}
/* key word */
TOKEN :
{
  < ARROW: "->" >
| < LEFTB:"(" >
| < RIGHTB:")" >
| < ASSIGN:":=" >
| < LET:"let" >
| < IN:"in" >
| < IF:"if" >
| < THEN:"then" >
| < END:"end" >
| < ELSE:"else" >
| < WHILE:"while" >
| < DO:"do" >
| < FST:"fst" >
| < SND:"snd" >
| < HEAD:"head" >
| < TAIL:"tail" >
| < SEMI:";" >
| < COMMA:"," >
| < FUN:"fun" >
| < WGGPRINT:"wggprint" >
}
/* bop*/
TOKEN :
{
 < EQUAL: "=" >
| < GT: ">" >
| < LT: "<" >
| < OR: "or" >
| < AND: "and" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
}
/*uop*/
TOKEN :
{
  < LANG:"~" >
| < NOT:"not" >
}

/* value */
TOKEN :
{

  < INT: ["0"-"9"] (["0"-"9"])*|"undef" >
| < BOOL: "true"|"false">
| < NIL:"nil" >
| < NOP:"()" >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < LETTER:  ["a"-"z"] >
|
  < DIGIT:
      ["0"-"9"]
  >
}



void syntax_Analysis()                        :
{/*@bgen(jjtree) #ConditionalNode( false) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCONDITIONALNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) #ConditionalNode( false) */
  try {
/*@egen*/
  Expression() 
  <EOF>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  false);
    }
  }
/*@egen*/
}

void Variable():
{/*@bgen(jjtree) Variable */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;}{/*@bgen(jjtree) Variable */
  try {
/*@egen*/
  (    t=< IDENTIFIER >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void Expression()                       :
{/*@bgen(jjtree) #ConditionalNode( false) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCONDITIONALNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ConditionalNode( false) */
  try {
/*@egen*/
  Sequence()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  false);
    }
  }
/*@egen*/}

void Sequence()             :
{/*@bgen(jjtree) #Sequence(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) #Sequence(> 1) */
  try {
/*@egen*/
  SingleExpression() (";" SingleExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void SingleExpression()                       :
{/*@bgen(jjtree) #ConditionalNode( false) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCONDITIONALNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) #ConditionalNode( false) */
  try {
/*@egen*/
  AnonymousFunction()|AssignExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  false);
    }
  }
/*@egen*/}
void AnonymousFunction():
{/*@bgen(jjtree) AnonymousFunction */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTANONYMOUSFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AnonymousFunction */
  try {
/*@egen*/
  "fun" Variable() "->" SingleExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void AssignExpression()                     :
{/*@bgen(jjtree) #AssignExpression(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTASSIGNEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) #AssignExpression(> 1) */
  try {
/*@egen*/
  ListExpression() (":=" SingleExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}

void ListExpression()                   :
{/*@bgen(jjtree) #ListExpression(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTLISTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) #ListExpression(> 1) */
  try {
/*@egen*/
  AddOrExpression() ("::" AddOrExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}

void AddOrExpression()                    :
{/*@bgen(jjtree) #AddOrExpression(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTADDOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) #AddOrExpression(> 1) */
  try {
/*@egen*/
  CondExpression() (AddOr_Op() CondExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}

void AddOr_Op():
{/*@bgen(jjtree) AddOr_Op */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTADDOR_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;}{/*@bgen(jjtree) AddOr_Op */
  try {
/*@egen*/
  (t="and"|t="or")/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void CondExpression()                   :
{/*@bgen(jjtree) #CondExpression(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCONDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) #CondExpression(> 1) */
  try {
/*@egen*/
  AddSubExpression()(Cond_Op() AddSubExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}

void Cond_Op():
{/*@bgen(jjtree) Cond_Op */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCOND_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Cond_Op */
  try {
/*@egen*/
  (t="="|t=">"|t="<")/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void AddSubExpression()                     :
{/*@bgen(jjtree) #AddSubExpression(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTADDSUBEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AddSubExpression(> 1) */
  try {
/*@egen*/
  MulDivExpression()(AddSub_Op() MulDivExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}
void AddSub_Op():
{/*@bgen(jjtree) AddSub_Op */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTADDSUB_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) AddSub_Op */
  try {
/*@egen*/
  (t="+"|t="-")/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void MulDivExpression()                     :
{/*@bgen(jjtree) #MulDivExpression(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTMULDIVEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) #MulDivExpression(> 1) */
  try {
/*@egen*/
  UopExpression()(MulDiv_Op() UopExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}
void MulDiv_Op():
{/*@bgen(jjtree) MulDiv_Op */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTMULDIV_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) MulDiv_Op */
  try {
/*@egen*/
  (t="*"|t="/")/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void  UopExpression()                  :
{/*@bgen(jjtree) #UopExpression(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTUOPEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #UopExpression(> 1) */
  try {
/*@egen*/
  (Uop())* AtomicExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}
void Uop():
{/*@bgen(jjtree) Uop */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTUOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;}
{/*@bgen(jjtree) Uop */
  try {
/*@egen*/
  (t="fst"|t="snd"|t="head"|t="tail"|t="~"|t="not")/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void AtomicExpression()                       :
{/*@bgen(jjtree) #ConditionalNode( false) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCONDITIONALNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) #ConditionalNode( false) */
  try {
/*@egen*/
  Variable()
| Value()
| LOOKAHEAD("(" Expression() ",")PairExp()
| LOOKAHEAD("(" Expression()")")BraExp()
| LOOKAHEAD("(" Expression())AppExp()
| LetExp()
| IfExp()
| WhileExp()
| PrintExp()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  false);
    }
  }
/*@egen*/}
void PrintExp():
{/*@bgen(jjtree) PrintExp */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPRINTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) PrintExp */
        try {
/*@egen*/
	"wggprint" SingleExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Value()                       :
{/*@bgen(jjtree) #ConditionalNode( false) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCONDITIONALNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) #ConditionalNode( false) */
  try {
/*@egen*/
  (        VInt()
| VBool()
| VNil()
| VNop()
)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  false);
    }
  }
/*@egen*/}
void VInt():
{/*@bgen(jjtree) VInt */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;}
{/*@bgen(jjtree) VInt */
  try {
/*@egen*/
  (t=< INT>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void VBool():
{/*@bgen(jjtree) VBool */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) VBool */
  try {
/*@egen*/
  (t=< BOOL>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void VNil():
{/*@bgen(jjtree) VNil */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVNIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) VNil */
  try {
/*@egen*/
  (t=< NIL>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void VNop():
{/*@bgen(jjtree) VNop */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVNOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) VNop */
  try {
/*@egen*/
  (t=< NOP>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void PairExp():
{/*@bgen(jjtree) PairExp */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPAIREXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) PairExp */
  try {
/*@egen*/
  "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void AppExp():
{/*@bgen(jjtree) AppExp */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAPPEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) AppExp */
  try {
/*@egen*/
  "(" Expression()  Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LetExp():
{/*@bgen(jjtree) LetExp */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTLETEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) LetExp */
  try {
/*@egen*/
  "let"  Variable() "=" Expression() "in"  Expression() "end"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void IfExp():
{/*@bgen(jjtree) IfExp */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTIFEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) IfExp */
  try {
/*@egen*/
  "if" Expression() "then"  Expression() "else" Expression() "end"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void WhileExp():
{/*@bgen(jjtree) WhileExp */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTWHILEEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) WhileExp */
  try {
/*@egen*/
  "while" Expression() "do"  Expression() "end"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void BraExp():
{/*@bgen(jjtree) BraExp */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTBRAEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) BraExp */
  try {
/*@egen*/
  "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}